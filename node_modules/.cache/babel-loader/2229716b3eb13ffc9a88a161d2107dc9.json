{"ast":null,"code":"var _jsxFileName = \"/Users/henrymerritt/Documents/dataBaseEntry/src/Slider.js\";\n//imports relevant files\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\nimport { handleNumber } from './actions'; //creates the slider file\n\nclass Slider extends React.Component {\n  //starts the states and creates the constant of start, and end which can be changed\n  constructor(props) {\n    this.handleNumber = this.handleNumber.bind(this);\n  }\n\n  //runs the render in order to implement the application\n  render() {\n    //creates the variables that will be relevant later in the document\n    let scale = [];\n    let slider = [];\n    let currentScale = [];\n    let maxThumb = null; //goes through each of the slots and prints off the labels on the top of the line\n\n    for (let i = 0; i <= this.state.slots; i++) {\n      let label = \"\"; //makes it so that only the number 0 5 and 10 are shown to the user\n\n      if (i == 0 || i == 5 || i == 10) {\n        label = i;\n      } // sets each of the keys relevant to the number in the for loop\n\n\n      scale.push(React.createElement(\"div\", {\n        key: i,\n        className: \"slot-scale\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, label)); // does the same as above, but only once instead as it is the value the slider is currently on\n\n      let currentLabel = \"\"; //checks that this value is shown as where the slider is currently on\n\n      if (i === this.state.end) {\n        currentLabel = i;\n      } // checks that the only current Scale value is filled\n\n\n      currentScale.push(React.createElement(\"div\", {\n        key: i,\n        className: \"slot-scale\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, currentLabel)); // checks if this state is equal to the end and then makes the variable mac Thumb equal to max Slider\n\n      if (i === this.state.end) {\n        maxThumb = React.createElement(this.MaxSlider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        });\n      } else {\n        //otherwise the maxThumb is bull\n        maxThumb = null;\n      } // creates a new variable of lineClass\n\n\n      let lineClass = \"line\"; //checks if the current number is less than the maximum and creates the line\n\n      if (i < this.state.end) {\n        lineClass += \" line-selected\";\n      } //implements the color and the obviousness of\n\n\n      slider.push(React.createElement(\"div\", {\n        \"data-slot\": i,\n        onDragOver: this.onDragOver,\n        onTouchMove: this.onDragOver,\n        onTouchEnd: this.onDrop,\n        onDrop: this.onDrop,\n        key: i,\n        className: \"slot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        \"data-slot\": i,\n        className: lineClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"scale-mark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), maxThumb));\n    }\n\n    return React.createElement(\"div\", {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"topSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"slider-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"slider-scale\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, scale), React.createElement(\"div\", {\n      className: \"slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, slider), React.createElement(\"div\", {\n      className: \"slider-selected-scale\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, currentScale))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    number: state\n  };\n}\n\nexport default Slider;","map":{"version":3,"sources":["/Users/henrymerritt/Documents/dataBaseEntry/src/Slider.js"],"names":["React","ReactDOM","createStore","connect","handleNumber","Slider","Component","constructor","props","bind","render","scale","slider","currentScale","maxThumb","i","state","slots","label","push","currentLabel","end","lineClass","onDragOver","onDrop","mapStateToProps","number"],"mappings":"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","sourcesContent":["//imports relevant files\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\nimport {connect} from 'react-redux';\nimport {handleNumber} from './actions';\n\n//creates the slider file\nclass Slider extends React.Component{\n\n  //starts the states and creates the constant of start, and end which can be changed\n  constructor(props){\n    this.handleNumber = this.handleNumber.bind(this);\n    \n}\nstate = {\n  //the amount of slots used in the slider\n  slots: 10,\n  start:0,\n  end: 5,\n  labelMode: \"mid\",\n}\n  //uses a dragover event\n  onDragOver = (e) =>{ \n    e.preventDefault();\n  }\n  // Implemented once the slider is clicked and just starting\n  onDragStart = (e) =>{\n    let slider = e.target.dataset.slider; \n    this.sliderType = slider;\n  }\n  //dragging event\n  onDrag = (e) => {\n  }\n  //what happens once this Slider is dropped\n  onDrop = (e,target) =>{\n    // sets variables to previous variables\n    let source = this.sliderType;\n    let slot = Number(e.target.dataset.slot);\n      //checks if slot is not a number, and if so it is returned\n      if(isNaN(slot)) return;\n      //sets the state to where the slider is currently\n      this.setState({\n        end:slot\n      },()=>{\n        console.log(this.state);\n        })\n      this.props.handleNumber(this.state.end);\n\n      // sets the sliderType to null\n      this.sliderType = null;\n  }\n  // Creates the slider edge in which is used to input the values\n  MaxSlider=()=>{\n    //returns the html that is relevant in order to make a slider\n  return(\n    <div data-slider = \"max\"\n    onDragStart={this.onDragStart}\n    onTouchStart={this.onDragStart}\n    onDrag={this.onDrag}\n    draggable className = \"slider-thumb slider-thumb-max\"></div>\n    );\n}\n  //runs the render in order to implement the application\n  render(){\n    //creates the variables that will be relevant later in the document\n    let scale = [];\n    let slider = [];\n    let currentScale = [];\n    let maxThumb = null;\n\n    //goes through each of the slots and prints off the labels on the top of the line\n    for(let i =0; i<=this.state.slots;i++){\n          let label = \"\";\n          //makes it so that only the number 0 5 and 10 are shown to the user\n          if(i == 0 || i == 5 || i == 10){\n            label = i;\n          }\n          // sets each of the keys relevant to the number in the for loop\n          scale.push(\n            <div \n            key={i} \n            className=\"slot-scale\">\n              {label}\n              </div>\n            );\n            // does the same as above, but only once instead as it is the value the slider is currently on\n            let currentLabel = \"\";\n            //checks that this value is shown as where the slider is currently on\n          if(i === this.state.end){\n            currentLabel = i;\n          }\n          // checks that the only current Scale value is filled\n            currentScale.push(<div \n              key={i} \n              className=\"slot-scale\">\n              {currentLabel}\n              </div>\n            );\n            // checks if this state is equal to the end and then makes the variable mac Thumb equal to max Slider\n            if(i === this.state.end){\n              maxThumb = <this.MaxSlider />\n            } else{\n              //otherwise the maxThumb is bull\n              maxThumb = null;\n            }\n            // creates a new variable of lineClass\n            let lineClass = \"line\";\n\n            //checks if the current number is less than the maximum and creates the line\n            if(i<this.state.end){\n              lineClass += \" line-selected\";\n            }\n            //implements the color and the obviousness of\n            slider.push(\n                <div\n                data-slot={i}\n                onDragOver={this.onDragOver}\n                onTouchMove = {this.onDragOver}\n                onTouchEnd = {this.onDrop}\n                onDrop = {this.onDrop}\n                key={i}\n                className=\"slot\">\n                <div data-slot={i} className={lineClass}/>\n                <span className=\"scale-mark\"></span>\n                {maxThumb}\n                </div>\n              );\n          }\n    return(\n        \n      <div align=\"center\">\n        <div className=\"topSlider\">\n         <div className = \"slider-container\">\n           <div className = \"slider-scale\">\n              {scale}\n           </div>\n           <div className=\"slider\">\n              {slider}\n            </div>\n            <div className=\"slider-selected-scale\">\n             {currentScale}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nfunction mapStateToProps(state){\n  return{\n    number: state\n  }\n}\n\nexport default Slider;"]},"metadata":{},"sourceType":"module"}