{"ast":null,"code":"var _jsxFileName = \"/Users/henrymerritt/Documents/dataBaseEntry/src/index.js\";\n//imports all relevant files\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'; //STORE\n// globalised state, will be helpful for checkboxes and for sliders\n// ACTION describes what you want to do\n\nconst increment = () => {\n  return {\n    type: 'INCREMENT'\n  };\n};\n\nconst decrement = () => {\n  return {\n    type: 'DECREMENT'\n  };\n};\n\nconst counter = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n\n    case 'DECREMENT':\n      return state - 1;\n  }\n};\n\nlet store = createStore(counter); //REDUCER describes how actions transform into the next state\n//DISPATCH execute the action\n// renders the file that is passed through and presents it to the GUI\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/henrymerritt/Documents/dataBaseEntry/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","createStore","increment","type","decrement","counter","state","action","store","render","document","getElementById","unregister"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAAQC,WAAR,QAA0B,OAA1B,C,CAEA;AACA;AAEA;;AACA,MAAMC,SAAS,GAAG,MAAK;AACnB,SAAM;AACFC,IAAAA,IAAI,EAAE;AADJ,GAAN;AAGH,CAJD;;AAMA,MAAMC,SAAS,GAAG,MAAK;AACnB,SAAM;AACFD,IAAAA,IAAI,EAAE;AADJ,GAAN;AAGH,CAJD;;AAKA,MAAME,OAAO,GAAG,CAACC,KAAK,GAAE,CAAR,EAAWC,MAAX,KAAqB;AACjC,UAAOA,MAAM,CAACJ,IAAd;AACI,SAAK,WAAL;AACI,aAAOG,KAAK,GAAG,CAAf;;AACJ,SAAK,WAAL;AACI,aAAOA,KAAK,GAAG,CAAf;AAJR;AAMH,CAPD;;AASA,IAAIE,KAAK,GAAGP,WAAW,CAACI,OAAD,CAAvB,C,CAEA;AAEA;AAGA;;AACAP,QAAQ,CAACW,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACAX,aAAa,CAACY,UAAd","sourcesContent":["//imports all relevant files\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\n\n//STORE\n// globalised state, will be helpful for checkboxes and for sliders\n\n// ACTION describes what you want to do\nconst increment = () =>{\n    return{\n        type: 'INCREMENT'\n    }\n}\n\nconst decrement = () =>{\n    return{\n        type: 'DECREMENT'\n    }\n}\nconst counter = (state =0, action) =>{\n    switch(action.type){\n        case 'INCREMENT':\n            return state + 1;\n        case 'DECREMENT':\n            return state - 1;\n    }\n}\n\nlet store = createStore(counter);\n\n//REDUCER describes how actions transform into the next state\n\n//DISPATCH execute the action\n\n\n// renders the file that is passed through and presents it to the GUI\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}