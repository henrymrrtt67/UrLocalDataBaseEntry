{"ast":null,"code":"var _jsxFileName = \"/Users/henrymerritt/Documents/UrLocal/urlocalbackend/src/App.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\nfunction submission(props) {\n  var barName = this.getElementById(\"barName\").value;\n}\n\nfunction setScale() {\n  for (let i = 0; i <= this.state.slots; i++) {\n    let label = \"\";\n\n    if (i == 0 || i == 5 || i == 10) {\n      label = i;\n    }\n  }\n\n  scale.push(React.createElement(\"div\", {\n    key: i,\n    className: \"slot-scale\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, label));\n}\n\nfunction setCurrentScale() {\n  let currentLabel = \"\";\n\n  if (i === this.state.start || i === this.state.end) {\n    currentLabel = i;\n  }\n\n  currentScale.push(React.createElement(\"div\", {\n    key: i,\n    className: \"slot-scale\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, label));\n}\n\nclass Slider extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      slots: 10,\n      start: 0,\n      end: 10,\n      labelMode: \"mid\"\n    };\n  }\n\n  render() {\n    let scale = [];\n    let slider = [];\n    let currentScale = [];\n    let minThumb = null;\n    let maxThumb = null;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \" React Slider\"), React.createElement(\"div\", {\n      className: \"topSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"slider-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"slider-scale\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, scale), React.createElement(\"div\", {\n      className: \"slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, slider), React.createElement(\"div\", {\n      className: \"slider-selected-scale\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, currentScale))));\n  }\n\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"What is the Barname: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"barName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/henrymerritt/Documents/UrLocal/urlocalbackend/src/App.js"],"names":["React","ReactDOM","submission","props","barName","getElementById","value","setScale","i","state","slots","label","scale","push","setCurrentScale","currentLabel","start","end","currentScale","Slider","Component","labelMode","render","slider","minThumb","maxThumb","App","constructor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './App.css';\nfunction submission(props){\n          var barName = this.getElementById(\"barName\").value;\n        } \n\n  function setScale(){\n    for(let i =0; i<=this.state.slots;i++){\n          let label = \"\";\n          if(i == 0 || i == 5 || i == 10){\n            label = i;\n          }\n        }\n          scale.push(\n            <div \n            key={i} \n            className=\"slot-scale\">\n              {label}\n              </div>\n            );\n        }\n  function setCurrentScale(){\n    let currentLabel = \"\";\n    if(i === this.state.start || i === this.state.end){\n      currentLabel = i;\n    }\n    currentScale.push(<div \n            key={i} \n            className=\"slot-scale\">\n              {label}\n              </div>\n            );\n    }\n  \nclass Slider extends React.Component{\n  state = {\n    slots: 10,\n    start:0,\n    end: 10,\n    labelMode: \"mid\",\n  }\n  render(){\n    let scale = [];\n    let slider = [];\n    let currentScale = [];\n    let minThumb = null;\n    let maxThumb = null;\n    return(\n        \n      <div>\n        <h2> React Slider</h2>\n        <div className=\"topSlider\">\n         <div className = \"slider-container\">\n           <div className = \"slider-scale\">\n              {scale}\n           </div>\n           <div className=\"slider\">\n              {slider}\n            </div>\n            <div className=\"slider-selected-scale\">\n             {currentScale}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n  }\n  render(){\n  return (\n    <div className=\"App\">\n      <header>\n        <form>\n        <label>\n          What is the Barname: <br/>\n          <input type = \"text\" id=\"barName\"/>\n        </label>\n        </form>\n       </header>\n    </div>\n  );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}