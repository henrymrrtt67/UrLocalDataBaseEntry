{"ast":null,"code":"var _jsxFileName = \"/Users/henrymerritt/Documents/UrLocal/urlocalbackend/src/Slider.js\";\n//imports relevant files\nimport React from 'react';\nimport ReactDOM from 'react-dom'; //creates the slider file\n\nclass Slider extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //the amount of slots used in the slider\n      slots: 10,\n      start: 0,\n      end: 5,\n      labelMode: \"mid\"\n    };\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDragStart = e => {\n      let slider = e.target.dataset.slider;\n      this.sliderType = slider;\n    };\n\n    this.onDrag = e => {};\n\n    this.onDrop = (e, target) => {\n      // sets variables to previous variables\n      let source = this.sliderType;\n      let slot = Number(e.target.dataset.slot); //checks if slot is not a number, and if so it is returned\n\n      if (isNaN(slot)) return; //sets the state to where the slider is currently\n\n      this.setState({\n        end: slot\n      }, () => {\n        console.log(this.state);\n      }); // sets the sliderType to null\n\n      this.sliderType = null;\n    };\n\n    this.MaxSlider = () => {\n      //returns the html that is relevant in order to make a slider\n      return React.createElement(\"div\", {\n        \"data-slider\": \"max\",\n        onDragStart: this.onDragStart,\n        onTouchStart: this.onDragStart,\n        onDrag: this.onDrag,\n        draggable: true,\n        className: \"slider-thumb slider-thumb-max\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      });\n    };\n  }\n\n  //runs the render in order to implement the application\n  render() {\n    //creates the variables that will be relevant later in the document\n    let scale = [];\n    let slider = [];\n    let currentScale = [];\n    let maxThumb = null; //goes through each of the slots and prints off the labels on the top of the line\n\n    for (let i = 0; i <= this.state.slots; i++) {\n      let label = \"\"; //makes it so that only the number 0 5 and 10 are shown to the user\n\n      if (i == 0 || i == 5 || i == 10) {\n        label = i;\n      } // sets each of the keys relevant to the number in the for loop\n\n\n      scale.push(React.createElement(\"div\", {\n        key: i,\n        className: \"slot-scale\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, label)); // does the same as above, but only once instead as it is the value the slider is currently on\n\n      let currentLabel = \"\"; //checks that this value is shown as where the slider is currently on\n\n      if (i === this.state.end) {\n        currentLabel = i;\n      } // checks that the only current Scale value is filled\n\n\n      currentScale.push(React.createElement(\"div\", {\n        key: i,\n        className: \"slot-scale\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, currentLabel)); // checks if this state is equal to the end and then makes the variable mac Thumb equal to max Slider\n\n      if (i === this.state.end) {\n        maxThumb = React.createElement(this.MaxSlider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        });\n      } else {\n        //otherwise the maxThumb is bull\n        maxThumb = null;\n      } // creates a new variable of lineClass\n\n\n      let lineClass = \"line\"; //checks if the current number is less than the maximum and creates the line\n\n      if (i < this.state.end) {\n        lineClass += \" line-selected\";\n      } //implements the color and the obviousness of the line from 0 to the max\n\n\n      slider.push(React.createElement(\"div\", {\n        \"data-slot\": i,\n        onDragOver: this.onDragOver,\n        onTouchMove: this.onDragOver,\n        onTouchEnd: this.onDrop,\n        onDrop: this.onDrop,\n        key: i,\n        className: \"slot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        \"data-slot\": i,\n        className: lineClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"scale-mark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), \"// places the final value as obvious to the user\", maxThumb));\n    } //final html that will be returned and implemented once rendered\n\n\n    return React.createElement(\"div\", {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"topSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"slider-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"slider-scale\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, scale), \"//implements the slider\", React.createElement(\"div\", {\n      className: \"slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, slider), React.createElement(\"div\", {\n      className: \"slider-selected-scale\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"//shows the current value the slider is on\", currentScale))));\n  }\n\n} //exports the slider\n\n\nexport default Slider;","map":{"version":3,"sources":["/Users/henrymerritt/Documents/UrLocal/urlocalbackend/src/Slider.js"],"names":["React","ReactDOM","Slider","Component","state","slots","start","end","labelMode","onDragOver","e","preventDefault","onDragStart","slider","target","dataset","sliderType","onDrag","onDrop","source","slot","Number","isNaN","setState","console","log","MaxSlider","render","scale","currentScale","maxThumb","i","label","push","currentLabel","lineClass"],"mappings":"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","sourcesContent":["//imports relevant files\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n//creates the slider file\nclass Slider extends React.Component{\n\n  //starts the states and creates the constant of start, and end which can be changed\n  state = {\n    //the amount of slots used in the slider\n    slots: 10,\n    start:0,\n    end: 5,\n    labelMode: \"mid\",\n  }\n  //uses a dragover event\n  onDragOver = (e) =>{ \n    e.preventDefault();\n  }\n  // Implemented once the slider is clicked and just starting\n  onDragStart = (e) =>{\n    let slider = e.target.dataset.slider; \n    this.sliderType = slider;\n  }\n  //dragging event\n  onDrag = (e) => {\n  }\n  //what happens once this Slider is dropped\n  onDrop = (e,target) =>{\n    // sets variables to previous variables\n    let source = this.sliderType;\n    let slot = Number(e.target.dataset.slot);\n      //checks if slot is not a number, and if so it is returned\n      if(isNaN(slot)) return;\n      //sets the state to where the slider is currently\n      this.setState({\n        end:slot\n      },()=>{\n        console.log(this.state);\n        })\n      // sets the sliderType to null\n      this.sliderType = null;\n  }\n  // Creates the slider edge in which is used to input the values\n  MaxSlider=()=>{\n    //returns the html that is relevant in order to make a slider\n  return(\n    <div data-slider = \"max\"\n    onDragStart={this.onDragStart}\n    onTouchStart={this.onDragStart}\n    onDrag={this.onDrag}\n    draggable className = \"slider-thumb slider-thumb-max\"></div>\n    );\n}\n  //runs the render in order to implement the application\n  render(){\n    //creates the variables that will be relevant later in the document\n    let scale = [];\n    let slider = [];\n    let currentScale = [];\n    let maxThumb = null;\n\n    //goes through each of the slots and prints off the labels on the top of the line\n    for(let i =0; i<=this.state.slots;i++){\n          let label = \"\";\n          //makes it so that only the number 0 5 and 10 are shown to the user\n          if(i == 0 || i == 5 || i == 10){\n            label = i;\n          }\n          // sets each of the keys relevant to the number in the for loop\n          scale.push(\n            <div \n            key={i} \n            className=\"slot-scale\">\n              {label}\n              </div>\n            );\n            // does the same as above, but only once instead as it is the value the slider is currently on\n            let currentLabel = \"\";\n            //checks that this value is shown as where the slider is currently on\n          if(i === this.state.end){\n            currentLabel = i;\n          }\n          // checks that the only current Scale value is filled\n            currentScale.push(<div \n              key={i} \n              className=\"slot-scale\">\n              {currentLabel}\n              </div>\n            );\n            // checks if this state is equal to the end and then makes the variable mac Thumb equal to max Slider\n            if(i === this.state.end){\n              maxThumb = <this.MaxSlider />\n            } else{\n              //otherwise the maxThumb is bull\n              maxThumb = null;\n            }\n            // creates a new variable of lineClass\n            let lineClass = \"line\";\n\n            //checks if the current number is less than the maximum and creates the line\n            if(i<this.state.end){\n              lineClass += \" line-selected\";\n            }\n            //implements the color and the obviousness of the line from 0 to the max\n            slider.push(\n                <div\n                data-slot={i}\n                onDragOver={this.onDragOver}\n                onTouchMove = {this.onDragOver}\n                onTouchEnd = {this.onDrop}\n                onDrop = {this.onDrop}\n                key={i}\n                className=\"slot\">\n                <div data-slot={i} className={lineClass}/>\n                <span className=\"scale-mark\"></span>\n                // places the final value as obvious to the user\n                {maxThumb}\n                </div>\n              );\n          }\n    //final html that will be returned and implemented once rendered\n    return(\n      \n      <div align=\"center\">\n        <div className=\"topSlider\">\n         <div className = \"slider-container\">\n           <div className = \"slider-scale\">\n              {scale}\n           </div>\n           //implements the slider\n           <div className=\"slider\">\n              {slider}\n            </div>\n            <div className=\"slider-selected-scale\">\n            //shows the current value the slider is on\n             {currentScale}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n//exports the slider\nexport default Slider;"]},"metadata":{},"sourceType":"module"}